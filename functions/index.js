const functions = require(\"firebase-functions\");\nconst admin = require(\"firebase-admin\");\nconst axios = require(\"axios\");\nconst xml2js = require(\"xml2js\");\nconst cors = require('cors')({ origin: true });\nconst path = require('path');\nconst os = require('os');\nconst fs = require('fs');\nconst Busboy = require('busboy');\n\nadmin.initializeApp();\n\nconst runtimeOpts = {\n  timeoutSeconds: 120,\n  memory: '512MB'\n};\n\nconst regionalFunctions = functions.region('us-central1').runWith(runtimeOpts);\n\nexports.calculateShipping = regionalFunctions.https.onRequest((req, res) => {\n    cors(req, res, async () => {\n        if (req.method !== 'POST') {\n            return res.status(405).send({ error: 'Method not allowed' });\n        }\n        try {\n            const destinationCep = req.body?.data?.cep;\n            if (!destinationCep || !/^\d{8}$/.test(destinationCep)) {\n                return res.status(400).send({ error: \"O CEP é obrigatório e deve ter 8 dígitos.\" });\n            }\n            const originCep = \"21371121\";\n            const packageWeight = \"1\";\n            const correiosUrl = `http://ws.correios.com.br/calculador/CalcPrecoPrazo.aspx?sCepOrigem=${originCep}&sCepDestino=${destinationCep}&nVlPeso=${packageWeight}&nCdFormato=1&nVlComprimento=20&nVlAltura=10&nVlLargura=15&nCdServico=04510&StrRetorno=xml`;\n            const response = await axios.get(correiosUrl);\n            const xml = response.data;\n            const parser = new xml2js.Parser();\n            const result = await parser.parseStringPromise(xml);\n            const service = result.Servicos.cServico[0];\n            if (service.Erro[0] !== \"0\" && service.MsgErro && service.MsgErro.length > 0) {\n                return res.status(400).send({ error: service.MsgErro[0].trim() });\n            }\n            const shippingValue = service.Valor[0].replace(\",\", \".\");\n            const deliveryTime = service.PrazoEntrega[0];\n            const responseData = { data: { price: parseFloat(shippingValue), deadline: parseInt(deliveryTime, 10) } };\n            return res.status(200).send(responseData);\n        } catch (error) {\n            console.error(\"Erro no cálculo de frete:\", error);\n            return res.status(500).send({ error: \"Falha interna ao calcular o frete.\" });\n        }\n    });\n});\n\nexports.uploadFile = regionalFunctions.https.onRequest((req, res) => {\n    cors(req, res, () => {\n        if (req.method !== 'POST') {\n            return res.status(405).json({ error: 'Method not allowed' });\n        }\n\n        const busboy = new Busboy({ headers: req.headers });\n        const tmpdir = os.tmpdir();\n        const uploads = [];\n        const fileWrites = [];\n\n        busboy.on('file', (fieldname, file, filename, encoding, mimetype) => {\n            const filepath = path.join(tmpdir, filename);\n            uploads.push({ filepath, mimetype });\n\n            const writeStream = fs.createWriteStream(filepath);\n            file.pipe(writeStream);\n\n            const promise = new Promise((resolve, reject) => {\n                file.on('end', () => writeStream.end());\n                writeStream.on('finish', resolve);\n                writeStream.on('error', reject);\n            });\n            fileWrites.push(promise);\n        });\n\n        busboy.on('error', err => {\n            console.error('Erro do Busboy:', err);\n            res.status(400).json({ error: 'Erro ao processar o formulário.' });\n        });\n\n        busboy.on('finish', async () => {\n            try {\n                await Promise.all(fileWrites);\n\n                const bucket = admin.storage().bucket();\n                const imageUrls = [];\n\n                for (const upload of uploads) {\n                    const { filepath, mimetype } = upload;\n                    const filename = path.basename(filepath);\n                    const destination = `products/${Date.now()}-${filename}`;\n\n                    await bucket.upload(filepath, {\n                        destination: destination,\n                        metadata: { contentType: mimetype },\n                        public: true\n                    });\n                    fs.unlinkSync(filepath);\n\n                    const publicUrl = `https://storage.googleapis.com/${bucket.name}/${destination}`;\n                    imageUrls.push(publicUrl);\n                }\n                \n                res.status(200).json({ imageUrls });\n            } catch (error) {\n                console.error(\"Erro no upload para o Storage:\", error);\n                res.status(500).json({ error: 'Falha ao fazer upload do arquivo.' });\n            }\n        });\n\n        // ✅ CORREÇÃO FINAL: Usa o método padrão e mais robusto para processar o request.\n        req.pipe(busboy);\n    });\n});\n